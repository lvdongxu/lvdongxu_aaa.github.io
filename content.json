{"pages":[{"title":"关于","text":"A simple, delicate, and modern theme for the static site generator Hexo. Preview | Documentation | Download :cd: InstallationDownload &amp; extract or git clone Icarus from GitHub to your blog’s theme folder, and that’s it! 1git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus Once started, Icarus will remind you of any missing dependencies and configuration files. :gift: FeaturesExtensive Plugin Support Icarus includes plentiful search, comment, sharing and other plugins out of the box. You can choose any of them to enrich yourblog experience, or build your own plugin easily referring to the existing Icarus plugins. Comment plugins Changyan Disqus Facebook Gitment Isso LiveRe Valine Search plugins Insight Search Google Custom Search Engine Baidu Site Search Share plugins AddThis AddToAny Baidu Share Share.js ShareThis Donation Buttons Alipay Wechat Paypal Patreon Other plugins Hexo Tag Plugin lightGallery &amp; Justified Gallery MathJax Site Analytics Rich Code Highlight Theme Choices Icarus directly import code highlight themes from the highlight.js package, and makes more than70 highlight themes available to you. Elastic Theme Configuration In addition to the minimalistic and easy-to-understand configuration design, Icarus allows you to set configurations on aper-page basis with the ability to merge and override partial configurations. _config.yml post.md menu: Archives: /archives Categories: /categories Tags: /tags About: /about title: A Simple Post menu: Go Home: /index.html --- # Here is some simple markdown. Responsive Layout No matter what modern browsering device your audiences are using, they can always get the best experience because Icarus’s responsivelayout across multiple viewpoints. :hammer: DevelopmentThis project is built with Hexo 3.7.1 Ejs Stylus Bulma 0.7.2 Please refer to the documentation for Icarus implementation details. :tada: ContributeIf you feel like to help us build a better Icarus, you can :electric_plug: Write a plugin |:black_nib: Submit a tutorial |:triangular_flag_on_post: Report a bug |:earth_asia: Add a translation :memo: LicenseThis project is licensed under the MIT License - see the LICENSE file for details.","link":"/%E5%85%B3%E4%BA%8E/index.html"},{"title":"分类","text":"","link":"/%E5%88%86%E7%B1%BB/index.html"},{"title":"归档","text":"","link":"/%E5%BD%92%E6%A1%A3/index.html"},{"title":"标签","text":"","link":"/%E6%A0%87%E7%AD%BE/index.html"}],"posts":[{"title":"Massive MIMO 论文名录及要点整理","text":"这篇博客主要是整理看过的有关Massive MIMO的论文，英文为主，做一下简单的名录和链接整理，便于以后查找和写论文引用。 Part 1 Survey &amp; Tutorial1.1Massive MIMO Detection Techniques: A Survey(这是我看过的对线性大规模检测最为全面的Survey之一，初入门者可以看，也可以作为论文查找目录) Citation: M. A. Albreem, M. Juntti and S. Shahabuddin, “Massive MIMO Detection Techniques: A Survey,” in IEEE Communications Surveys &amp; Tutorials. doi: 10.1109/COMST.2019.2935810 1.2 Massive MIMO: An Introduction(这篇主要是介绍整体MIMO系统，不专注与任何一个单独的流程) Citation: T. L. Marzetta, “Massive MIMO: An Introduction,” in Bell Labs Technical Journal, vol. 20, pp. 11-22, 2015. doi: 10.15325/BLTJ.2015.2407793 1.3 Fifty Years of MIMO Detection: The Road to Large-Scale MIMOs(非常全面的MIMO检测入门综述，主要注重明确MIMO检测算法的发展和检测过程中影响性能的主要关键因素) Citation: S. Yang and L. Hanzo, “Fifty Years of MIMO Detection: The Road to Large-Scale MIMOs,” in IEEE Communications Surveys &amp; Tutorials, vol. 17, no. 4, pp. 1941-1988, Fourthquarter 2015. doi: 10.1109/COMST.2015.2475242 Part 2 Dissertation (Doctoral or Master’s)2.1 Bei Yin - Low Complexity Detection and Precoding for Massive MIMO Systems: Algorithm, Architectures, and Application(B.Yin 的博士论文是比较全面的讲述NS和CG两种近似矩阵求逆算法的文章，这两大章节的叙述顺序与细节格式值得参考学习) 主要内容： NS（纽曼级数展开法） NS展开数学公式推导 NS的LLR数学推导 FPGA实现 ASIC实现 CG（这里的CG包含传统CG和CGLS） CG迭代公式推导 CG优化成CGLS CG和CGLS的伪代码 CG的ASIC实现细节硬件结构 2.2 Christoph Studer - Interative MIMO Decoding Algorithms and VLSI Implementation Aspects(Studer的博士论文主要关注Channel Decoding与Detection之间通过软信息交换迭代来实现最高准确度的JDD(Joint Detection and Decoding)) 主要内容： JDD基本介绍 SISO MMSE PIC 数学推导 硬件实现及复杂度优化 整体结构模型 VLSI实现结构 SISO Sphere Decoding 没太看，啥也没懂 SISO Channel Decoding LDPC BCJR Turbo Part 3 Linear Detectors3.1 线性迭代近似求逆算法3.1.1 Neumann Series Expension proposition - Large-Scale MIMO Detection for 3GPP LTE: Algorithms and FPGA Implementations(纽曼级数展开法的提出论文) 主要内容： NS法的数学推导 MATLAB仿真结果 ASIC硬件结构 FPGA实现结果 - 600Mb/s Citation: M. Wu, B. Yin, G. Wang, C. Dick, J. R. Cavallaro and C. Studer, “Large-Scale MIMO Detection for 3GPP LTE: Algorithms and FPGA Implementations,” in IEEE Journal of Selected Topics in Signal Processing, vol. 8, no. 5, pp. 916-929, Oct. 2014.doi: 10.1109/JSTSP.2014.2313021 3.1.2 NS VLSI - A 3.8Gb/s large-scale MIMO detector for 3GPP LTE-Advanced(纽曼级数展开法的硬件实现方案，Bei Yin的一篇论文) Citation: B. Yin, M. Wu, G. Wang, C. Dick, J. R. Cavallaro and C. Studer, “A 3.8Gb/s large-scale MIMO detector for 3GPP LTE-Advanced,” 2014 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP), Florence, 2014, pp. 3879-3883.doi: 10.1109/ICASSP.2014.6854328 3.1.3 三对角NS法 - On the Low-Complexity, Hardware-Friendly Tridiagonal Matrix Inversion for Correlated Massive MIMO Systems(东南大学的大佬提出的用三对角阵代替对角阵来进行NS展开法的算法，数学推导很多，而且硬件实现很有创造力) Citation: C. Zhang et al., “On the Low-Complexity, Hardware-Friendly Tridiagonal Matrix Inversion for Correlated Massive MIMO Systems,” in IEEE Transactions on Vehicular Technology, vol. 68, no. 7, pp. 6272-6285, July 2019.doi: 10.1109/TVT.2019.2915171 3.1.4 NI+RI+NS - A Low Complexity Signal Detection Scheme Based on Improved Newton Iteration for Massive MIMO Systems(牛顿迭代法改进论文，结合了RI和NS) Citation: F. Jin, Q. Liu, H. Liu and P. Wu, “A Low Complexity Signal Detection Scheme Based on Improved Newton Iteration for Massive MIMO Systems,” in IEEE Communications Letters, vol. 23, no. 4, pp. 748-751, April 2019.doi: 10.1109/LCOMM.2019.2897798 3.1.5 Richardson Iteration Proposed - Low-Complexity MMSE Signal Detection Based on Richardson Method for Large-Scale MIMO Systems(清华老哥写的RI法的提出论文) Citation: X. Gao, L. Dai, C. Yuen and Y. Zhang, “Low-Complexity MMSE Signal Detection Based on Richardson Method for Large-Scale MIMO Systems,” 2014 IEEE 80th Vehicular Technology Conference (VTC2014-Fall), Vancouver, BC, 2014, pp. 1-5.doi: 10.1109/VTCFall.2014.6966041 注：清华老哥在写这篇会议的时候还投了一篇letter，内容是基本一样的，letter的内容更少一点。 X. Gao, L. Dai, Y. Ma and Z. Wang, “Low-complexity near-optimal signal detection for uplink large-scale MIMO systems,” in Electronics Letters, vol. 50, no. 18, pp. 1326-1328, 28 August 2014.doi: 10.1049/el.2014.0713 3.1.6 CG VLSI - VLSI design of large-scale soft-output MIMO detection using conjugate gradients(B.Yin的CG法及CGLS的硬件实现，内容基本包含在了他的博士论文里面，还不如博士论文里面的全面) Citation: B. Yin, M. Wu, J. R. Cavallaro and C. Studer, “VLSI design of large-scale soft-output MIMO detection using conjugate gradients,” 2015 IEEE International Symposium on Circuits and Systems (ISCAS), Lisbon, 2015, pp. 1498-1501.doi: 10.1109/ISCAS.2015.7168929 3.1.7 PCI - Low-Computing-Load, High-Parallelism Detection Method Based on Chebyshev Iteration for Massive MIMO Systems With VLSI Architecture(清华老哥提出的并行切比雪夫迭代法) Citation: G. Peng, L. Liu, P. Zhang, S. Yin and S. Wei, “Low-Computing-Load, High-Parallelism Detection Method Based on Chebyshev Iteration for Massive MIMO Systems With VLSI Architecture,” in IEEE Transactions on Signal Processing, vol. 65, no. 14, pp. 3775-3788, 15 July15, 2017.doi: 10.1109/TSP.2017.2698410 3.1.8 GS Proposition - Low-Complexity Soft-Output Signal Detection Based on Gauss–Seidel Method for Uplink Multiuser Large-Scale MIMO Systems(GS - Gauss-Seidel迭代法的提出论文，性能非常优越的迭代法) Citation: L. Dai, X. Gao, X. Su, S. Han, C. I and Z. Wang, “Low-Complexity Soft-Output Signal Detection Based on Gauss–Seidel Method for Uplink Multiuser Large-Scale MIMO Systems,” in IEEE Transactions on Vehicular Technology, vol. 64, no. 10, pp. 4839-4845, Oct. 2015.doi: 10.1109/TVT.2014.2370106 3.1.9 GS VLSI - Efficient architecture for soft-output massive MIMO detection with Gauss-Seidel method(GS 的VLSI设计论文，其中放出了FPGA的实现结果，但是并没有流片结果) Citation: Z. Wu, C. Zhang, Y. Xue, S. Xu and X. You, “Efficient architecture for soft-output massive MIMO detection with Gauss-Seidel method,” 2016 IEEE International Symposium on Circuits and Systems (ISCAS), Montreal, QC, 2016, pp. 1886-1889.doi: 10.1109/ISCAS.2016.7538940 3.1.10 Jacobi 联合迭代 - A Near-Optimal Detection Scheme Based on Joint Steepest Descent and Jacobi Method for Uplink Massive MIMO Systems(秦晓波学长的论文，主要思想为Jacobi的联合迭代法，可参考的地方在于其在最后有列算法复杂度和FPGA实现结果的比较，很多算法都有包括) 算法复杂度和FPGA实现结果包含算法： 算法复杂度： NS RI CG GS SD JC FPGA实现结果： Cholesky NS RI CG GS 3.2 线性算法Asic Implementation 论文3.2.1 清华彭桂强TCAS-1 - 1.58 Gbps/W 0.40 Gbps/mm2 ASIC Implementation of MMSE Detection for $128\\times 8~64$ -QAM Massive MIMO in 65 nm CMOSCitation: G. Peng, L. Liu, S. Zhou, S. Yin and S. Wei, “A 1.58 Gbps/W 0.40 Gbps/mm2 ASIC Implementation of MMSE Detection for $128\\times 8~64$ -QAM Massive MIMO in 65 nm CMOS,” in IEEE Transactions on Circuits and Systems I: Regular Papers, vol. 65, no. 5, pp. 1717-1730, May 2018.doi: 10.1109/TCSI.2017.2754282 清华彭桂强老哥的东西，算法上的创新很少，硬件设计也没有特别出彩，但是有流片（实验室有钱），所以还是得尊敬一波。 这篇其实可以作为硬件入门的初级论文，非常详细的讲了Gram矩阵求解和迭代流水线结构，清晰明了，值得学习。 3.2.2 东南大学张川的GS硬件，创新点一般，写的也一般 - Efficient Soft-Output Gauss-Seidel Data Detector for Massive MIMO SystemsCitation: C. Zhang, Z. Wu, C. Studer, Z. Zhang and X. You, “Efficient Soft-Output Gauss-Seidel Data Detector for Massive MIMO Systems,” in IEEE Transactions on Circuits and Systems I: Regular Papers.doi: 10.1109/TCSI.2018.2875741 Part 4 Non-linear Detectors4.1 Lattice Reduction4.1.1 ELR - Element-Based Lattice Reduction Algorithms for Large MIMO DetectionCitation: Q. Zhou and X. Ma, “Element-Based Lattice Reduction Algorithms for Large MIMO Detection,” in IEEE Journal on Selected Areas in Communications, vol. 31, no. 2, pp. 274-286, February 2013.doi: 10.1109/JSAC.2013.130215 佐治亚理工的马晓丽团队2013年的LR系列的算法 - ELR，主要阐明了一种新的格基规约算法，基于Dual-lattice的规约方法。 主要作用于$C=(H^{H}H)^{-1}$对角线元素的约减，根据不同的约减迭代结束条件，分为D-ELR-SLV和D-ELR-SLB两种算法。 4.1.2 Improved ELR - Improved Element-Based Lattice Reduction Algorithms for Wireless CommunicationsCitation: Q. Zhou and X. Ma, “Improved Element-Based Lattice Reduction Algorithms for Wireless Communications,” in IEEE Transactions on Wireless Communications, vol. 12, no. 9, pp. 4414-4421, September 2013.doi: 10.1109/TWC.2013.072513.121479 佐治亚理工马晓丽团队2013年接续4.1.1的JSAC发表在TWC上面的改进论文，主要是改进ELR的遍历和规约方式。 改进主要体现在，每次基向量更新不再是只更新最大值列和行了，而是将整个矩阵进行更新，这样复杂度成倍增加，当然性能会优异很多。 4.1.3 FDLR - A Low-Complexity MIMO Detector Based on Fast Dual-Lattice Reduction AlgorithmCitation: C. Jing, X. Wang, B. Chen, Y. Ma and J. Wei, “A Low-Complexity MIMO Detector Based on Fast Dual-Lattice Reduction Algorithm,” 2016 IEEE 84th Vehicular Technology Conference (VTC-Fall), Montreal, QC, 2016, pp. 1-6.doi: 10.1109/VTCFall.2016.7880859 国防科大的老哥提出的格基规约算法 - FDLR快速格基规约算法，同样也是作用于Dual-lattice域 这篇文章的思路与4.1.1蛮类似的，但是存在着计算$\\lambda_{i,j}= \\lfloor \\frac{b_{j}^{H}b_{i}}{|| b_{j} ||^{2}} \\rceil$ 和类似正交分离度的计算，计算复杂度过高 4.1.4 LR综述类Magazine - Lattice ReductionCitation: D. Wübben, D. Seethaler, J. Jaldén and G. Matz, “Lattice Reduction,” in IEEE Signal Processing Magazine, vol. 28, no. 3, pp. 70-91, May 2011.doi: 10.1109/MSP.2010.938758 这是我LR入门看的文献，2011年的Magazine，比较通俗的讲述了LR的基本知识，包含了Dual-lattice域的知识，是非常好的入门教材","link":"/2019/11/23/mimo-lun-wen-mu-lu-zheng-li/"},{"title":"TensorFlow常用函数归档","text":"这篇博客主要是整理用到TensorFlow函数，方便日后查找 Part1 Matrix Structure1.1 tf.newaxis 矩阵增加维度命令该函数的作用是给tensor增加维度，例如： 12345import tensorflow as tf a = tf.range(10,dtype=tf.int32) print(a) b = a[:,tf.newaxis] print(b) 输出结果是： a的shape为（10，）b的shape为（10，1）若b = a[tf.newaxis,:]，则b的shape为（1,10） 1.2 tf.eye - 单位阵函数Part2 Matrix Calculation2.1 tf.matmul 矩阵相乘函数函数参数如下： 1234567891011tf.matmul( a, b, transpose_a=False, # 第一个矩阵是否在相乘前转置 transpose_b=False, # 第二个矩阵是否在相乘前转置 adjoint_a=False, # 第一个矩阵是否在相乘前共轭转置 adjoint_b=False, # 第二个矩阵是否在相乘前共轭转置 a_is_sparse=False, # 第一个矩阵是否是稀疏矩阵 b_is_sparse=False, # 第二个矩阵是否是稀疏矩阵 name=None) Part3 统计比较类的函数3.1 tf.equal() 比较两个矩阵/向量/张量间相对应位置的元素是否相等，返回同样大小的布尔张量函数定义如下： 12345tf.equal( x, # 张量。必须是以下类型之一:bfloat16、half、float32、float64、uint8、int8、int16、int32、int64、complex64、quint8、qint8、qint32、string、bool、complex128。 y, # 张量。必须具有与x相同的类型。 name=None # 操作的名称(可选)。) 3.2 tf.cast() 数据类型转换函数定义: 1234tf.cast(x, # 待转换的数据（张量） dtype, # 目标数据类型 name=None # 可选参数，定义操作的名称 ) 3.3 tf.reduce_mean() 计算张量各个维度上的平均值函数定义: 1234567tf.reduce_mean( input_tensor, # 要减少的张量.应该有数字类型. axis=None, # 要减小的尺寸.如果为None(默认),则减少所有维度.必须在[-rank(input_tensor), rank(input_tensor))范围内. keep_dims=False, # 如果为true,则保留长度为1的缩小尺寸. name=None, # 操作的名称(可选). reduction_indices=None # axis的不支持使用的名称.) 3.1+3.2+3.3 代码示例","link":"/2020/01/19/tensorflow-chang-yong-han-shu-gui-dang/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/01/21/hello-world/"},{"title":"Texlive+VSCode+LaTeX workshop+SumatraPDF","text":"这篇博客主要是整理在VSCode配置latex环境的配置步骤，方便大家学习和配置。 一、前言其实我之前的$\\LaTeX$写作环境是OverLeaf，这主要是因为本地配环境费劲而且自己配过texstudio之后发现界面丑的一笔，实在是不想委屈自己在这样的编辑器上面写论文，效果见下图： 丑爆+10086，而且臃肿不堪。 读知乎的时候看到一个大佬聊在VSCode上写$\\LaTeX$，我心动了，因为VSCode是我的主力编辑器，用于完美的开源社区和插件环境，无敌！！！这样我就找到了配环境的新方`向： VSCode + TexLive + Latex workshop(VSCode插件) + SumatraPDF(用于PDF编译预览) 下面就让我来介绍一下我配置环境的全过程，借鉴了知乎大牛的文章，文章链接如下: 使用VSCode编写LaTeX - Marvey 本章配置环境唯一前提：你已安装VSCode并且掌握基本的VSCode配置文件书写规则。 二、TexLive下载安装官网下载缓慢，而且下载链接找的也很费劲，所以还不如直接上清华镜像站下载，这属实要快很多。 下载下来以管理员身份打开install-tl-windows.bat来安装就可以了，一路 下一步 就完全可以了，当然如果可以的话，你也可以在 Advanced -&gt; Customize 中选择自己就需要的语言包，一些你这辈子都不会用到的语言包比如什么日文韩文之类的倒是可以勾掉。但是我安装的时候选择所有的包都安装，因为我还是新手菜鸟。 安装好了之后在命令行里测试一下自己的TeX是否真的安装成功了： 三、VSCode插件 - LaTeX Workshop配置1. 安装 LaTeX Workshop插件 上面的图展示的就是VSCode里面最实用的$\\LaTeX$插件，极为好用，几乎囊括了所有的功能，安装好的基本大功告成，就会有代码高亮咯……但是显然没有彻底结束，还有很多的配置呢…… 2. 配置编译工具和编译命令其实VSCode的主要作用也是复杂命令与简单的图形化界面相结合的结果，所以在一开始使用的时候需要自己老老实实配环境。 这里的基本步骤便是将相对应的编译工具与命令在配置区里面写好，通用配置可以见下面： 1234567891011121314151617181920212223242526272829303132// 编译工具及命令配置 \"latex-workshop.latex.tools\": [ { // 编译工具和命令 \"name\": \"xelatex\", \"command\": \"xelatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"-pdf\", \"%DOCFILE%\" ] }, { \"name\": \"pdflatex\", \"command\": \"pdflatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOCFILE%\" ] }, { \"name\": \"bibtex\", \"command\": \"bibtex\", \"args\": [ \"%DOCFILE%\" ] } ], 基本的编译工具配好了，就需要配置一下自己的编译链，默认编译链是XeLaTeX，当然也可以配置自己的编译链，我的编译链配置是这样的： 123456789101112131415161718// 编译链配置 \"latex-workshop.latex.recipes\": [ { \"name\": \"xelatex\", \"tools\": [ \"xelatex\" ] }, { \"name\": \"xe-&gt;bib-&gt;xe-&gt;xe\", \"tools\": [ \"xelatex\", \"bibtex\", \"xelatex\", \"xelatex\" ] } ], 设置第二个编译链的主要原因如下：原文链接 编译分4步： latex xx.tex 编译tex文件，没错误的话会生成aux文件，aux文件包含了引用这些的信息。 bibtex xx.aux 根据aux文件中记录的信息来检测bib文件中的相关文献，此时也会检测bib中相关的书写有无错误。 latex xx.tex 再次编译，把参考文献编译进文档中。 latex xx.tex 三次编译，把交叉引用编译正确。 这样基本就可以完成了。 接下来可以实验一下编译效果，编译内容如下： 编译效果如下： 当然，如果想要用pdflatex，就需要在tex文档首加一行这样的代码： 1%!TEX program = pdflatex 3. 配置SumatraPDF作为预览工具首先下载SumatraPDF，这个比较简单就不做赘述了。 其次，下载完成后需要在VSCode的进行基本的配置： 12345678// 外联sumatrapdf用于预览\"latex-workshop.view.pdf.viewer\": \"external\",\"latex-workshop.view.pdf.external.command\": { \"command\": \"E:/sumatrapdf/SumatraPDF.exe\", \"args\": [ \"%PDF%\" ]}, 然后我们就可以用SumatraPDF来预览了，预览图如下： 4. 配置正向搜索正向搜索的主要目的在于，我们在tex文件源码中点击，就可以在pdf定位该位置在哪一行。 在配置文件里面如下配置即可： 1234567891011// 正向搜索\"latex-workshop.showContextMenu\":true,\"latex-workshop.view.pdf.external.synctex\": { \"command\": \"E:/sumatrapdf/SumatraPDF.exe\", \"args\": [ \"-forward-search\", \"%TEX%\", \"%LINE%\", \"%PDF%\" ]}, 大致效果如下，我确认的一行是在tex文件里面的地13行，也就是被标注出来的一行： 在左边栏点击 SyncTex from cursor ，就会在SumatraPDF里面显示第二行被标注出来，这就是前向搜索的效果。 5. 配置反向搜索反向搜索的配置主要是在SumatraPDF中进行配置，这个PDF浏览器带了这个功能。 点击SumatraPDF的 设置-&gt;高级选项 会出现一个txt的配置文件，在最后一行需要添加这样一行配置，保证反向搜索功能添加： 1InverseSearchCmdLine = \"E:\\VScode\\Microsoft VS Code\\Code.exe\" \"E:\\VScode\\Microsoft VS Code\\resources\\app\\out\\cli.js\" -g \"%f:%l\" 第一个引号内是VSCode的.exe文件所在目录，第二个引号是cli.js所在目录，后面都不需要改。这样配置完就搞定了。 基本效果就是在PDF内双击一行的任意位置，在tex源码内光标就会移动到对应行的行首。","link":"/2020/01/22/texlive-vscode-latex-workshop-sumatrapdf/"}],"tags":[{"name":"MIMO Paper","slug":"MIMO-Paper","link":"/tags/MIMO-Paper/"},{"name":"TensorFlow Function","slug":"TensorFlow-Function","link":"/tags/TensorFlow-Function/"},{"name":"Hello World for hexo","slug":"Hello-World-for-hexo","link":"/tags/Hello-World-for-hexo/"},{"name":"VSCode相关环境配置","slug":"VSCode相关环境配置","link":"/tags/VSCode%E7%9B%B8%E5%85%B3%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}],"categories":[{"name":"MIMO","slug":"MIMO","link":"/categories/MIMO/"},{"name":"TensorFlow","slug":"TensorFlow","link":"/categories/TensorFlow/"},{"name":"环境配置","slug":"环境配置","link":"/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"}]}